{"version":3,"sources":["components/Task.js","components/TaskList.js","components/TextArea.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["Task","task","id","onClick","taskStatus","isDone","className","content","TaskList","props","list","map","key","TextArea","state","inputValue","handleChange","bind","onKeyPress","event","this","setState","target","value","charCode","onChange","type","React","Component","TodoApp","slice","push","status","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAaeA,G,MAVF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QAClBC,EAAaH,EAAKI,OAAS,OAAS,UAC1C,OACE,yBAAKC,UAAS,wBAAmBF,GAAcD,QAAS,kBAAMA,EAAQD,EAAID,EAAKI,UAC7E,0BAAMC,UAAU,cAChB,0BAAMA,UAAU,eAAgBL,EAAKM,YCG5BC,EARE,SAACC,GAChB,IAAMC,EAAOD,EAAMC,KAAKC,KAAI,SAACV,EAAMC,GAAP,OAC1B,kBAAC,EAAD,CAAMD,KAAMA,EAAMW,IAAKV,EAAIA,GAAIA,EAAIC,QAASM,EAAMN,aAGpD,OAAQ,6BAAMO,IC2BDG,E,kDAhCb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CAAEC,WAAY,IAC3B,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAJD,E,yDAONE,GACXC,KAAKC,SAAS,CACZN,WAAYI,EAAMG,OAAOC,U,iCAIlBJ,GACT,IAAIJ,EAAaI,EAAMG,OAAOC,MACP,KAAnBJ,EAAMK,UAAkC,KAAfT,IAC3BK,KAAKX,MAAMgB,SAASV,GACpBK,KAAKC,SAAS,CAAEN,WAAY,Q,+BAK9B,OACE,2BACEW,KAAK,OACLH,MAAOH,KAAKN,MAAMC,WAClBU,SAAUL,KAAKJ,aACfE,WAAYE,KAAKF,iB,GA5BFS,IAAMC,WCuCdC,E,kDAnCb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CAAEJ,KAAM,IACrB,EAAKM,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKd,QAAU,EAAKA,QAAQc,KAAb,gBAJE,E,yDAONV,GACXa,KAAKC,UAAS,SAACP,GACb,IAAIJ,EAAOI,EAAMJ,KAAKoB,QAEtB,OADApB,EAAKqB,KAAK,CAAExB,UAASF,QAAQ,IACtB,CAAEK,a,8BAILR,EAAI8B,GACVZ,KAAKC,UAAS,SAACP,GACb,IAAMJ,EAAOI,EAAMJ,KAAKoB,QAGxB,OAFapB,EAAKR,GACbG,QAAU2B,EACR,CAAEtB,a,+BAKX,OACE,6BACE,oCACA,kBAAC,EAAD,CAAUA,KAAMU,KAAKN,MAAMJ,KAAMP,QAASiB,KAAKjB,UAC/C,kBAAC,EAAD,CAAUsB,SAAUL,KAAKJ,oB,GA9BXW,IAAMC,WCGbK,EAJH,SAACxB,GACX,OAAO,kBAAC,EAAD,OCOWyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61ad0656.chunk.js","sourcesContent":["import React from 'react';\nimport '../task.css';\n\nconst Task = ({ task, id, onClick }) => {\n  const taskStatus = task.isDone ? 'done' : 'notDone';\n  return (\n    <div className={`taskContainer ${taskStatus}`} onClick={() => onClick(id, task.isDone)}>\n      <span className=\"taskColor\"></span>\n      <span className=\"taskContent\" >{task.content}</span>\n    </div >\n  );\n}\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\n\nconst TaskList = (props) => {\n  const list = props.list.map((task, id) => (\n    <Task task={task} key={id} id={id} onClick={props.onClick} />\n  ))\n\n  return (<div>{list}</div>);\n}\n\nexport default TaskList;","import React from 'react';\n\nclass TextArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    })\n  }\n\n  onKeyPress(event) {\n    let inputValue = event.target.value;\n    if (event.charCode === 13 && inputValue !== '') {\n      this.props.onChange(inputValue);\n      this.setState({ inputValue: '' });\n    }\n  }\n\n  render() {\n    return (\n      <input\n        type='text'\n        value={this.state.inputValue}\n        onChange={this.handleChange}\n        onKeyPress={this.onKeyPress}></input>\n    );\n  }\n}\n\nexport default TextArea;","import React from 'react';\n\nimport TaskList from './TaskList.js';\nimport TextArea from './TextArea';\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { list: [] };\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  handleChange(content) {\n    this.setState((state) => {\n      let list = state.list.slice();\n      list.push({ content, isDone: false });\n      return { list };\n    })\n  }\n\n  onClick(id, status) {\n    this.setState((state) => {\n      const list = state.list.slice();\n      const todo = list[id];\n      todo.isDone = !status;\n      return { list };\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Todo</h1>\n        <TaskList list={this.state.list} onClick={this.onClick} />\n        <TextArea onChange={this.handleChange} />\n      </div >\n    );\n  }\n}\n\nexport default TodoApp;","import React from 'react';\nimport './App.css';\nimport TodoApp from './components/TodoApp';\n\nconst App = (props) => {\n  return <TodoApp />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}